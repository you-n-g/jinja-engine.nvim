*jinja.txt*            For NVIM v0.8.0           Last change: 2024 November 21

==============================================================================
Table of Contents                                    *jinja-table-of-contents*

1. A Jinja Engine for Neovim                 |jinja-a-jinja-engine-for-neovim|
  - Motivation of the Plugin|jinja-a-jinja-engine-for-neovim-motivation-of-the-plugin|
  - Installation                |jinja-a-jinja-engine-for-neovim-installation|
  - Demo                                |jinja-a-jinja-engine-for-neovim-demo|
  - TODO                                |jinja-a-jinja-engine-for-neovim-todo|
  - Development                  |jinja-a-jinja-engine-for-neovim-development|
  - Related Projects        |jinja-a-jinja-engine-for-neovim-related-projects|
2. Links                                                         |jinja-links|

==============================================================================
1. A Jinja Engine for Neovim                 *jinja-a-jinja-engine-for-neovim*

<https://github.com/marketplace/actions/mega-linter>
<https://github.com/kdheepak/panvimdoc>


MOTIVATION OF THE PLUGIN*jinja-a-jinja-engine-for-neovim-motivation-of-the-plugin*

This plugin aims to offer an easy way to use the Jinja2
<https://palletsprojects.com/p/jinja/> template engine in Neovim. It utilizes
the lupa <https://github.com/zhsso/lupa/> engine, providing a straightforward
method to integrate Lupa into Neovim.


INSTALLATION                    *jinja-a-jinja-engine-for-neovim-installation*

>lua
    -- Lazy.nvim
    {
      "you-n-g/jinja-engine.nvim",
      dependencies = {
      },
    }
<


DEMO                                    *jinja-a-jinja-engine-for-neovim-demo*

It is common to use `you-n-g/jinja-engine.nvim` to develop other Neovim
plugins. For example, if you have installed `you-n-g/jinja-engine.nvim` as a
dependency of your plugin, like this:

>lua
    -- Lazy.nvim
    {
      "<your-plugin>.nvim",
      dependencies = {
        "you-n-g/jinja-engine.nvim",
      },
    }
<

Then you can use Jinja in your code like this:

>lua
    print(require('jinja').lupa.expand("hello {{ s }}!", {s = "world"}))
    print(require('jinja').lupa.expand("{% for i in {1, 2, 3} %}{{ i }}{% endfor %}"))
<

More advanced use cases can be found in lupa <https://github.com/zhsso/lupa/>.


TODO                                    *jinja-a-jinja-engine-for-neovim-todo*


DEVELOPMENT                      *jinja-a-jinja-engine-for-neovim-development*

We welcome contributions to this project.

You can test the plugin in the UI with minimal config using: - `vim -u
tests/init_conf/lazy.lua -U NONE -N -i NONE` for lazy.nvim
<https://github.com/folke/lazy.nvim>

If you prefer to run tests without a user interface, you can execute `make
test` to initiate the test suite.


RELATED PROJECTS            *jinja-a-jinja-engine-for-neovim-related-projects*

- lupa <https://github.com/zhsso/lupa/>

==============================================================================
2. Links                                                         *jinja-links*

1. *Mega-Linter*: https://github.com/you-n-g/jinja-engine.nvim/actions/workflows/linter.yml/badge.svg
2. *panvimdoc*: https://github.com/you-n-g/jinja-engine.nvim/actions/workflows/panvimdoc.yml/badge.svg

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
